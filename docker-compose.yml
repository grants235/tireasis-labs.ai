services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app_database}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - db_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-app_user} -d ${POSTGRES_DB:-app_database}"]
      interval: 30s
      timeout: 10s
      retries: 3

  db-server:
    build:
      context: ./db-server
      dockerfile: Dockerfile
    container_name: db_server
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app_database}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your_secure_password}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      DB_SERVER_API_KEY: ${DB_SERVER_API_KEY:-default_key}
      DB_SERVER_PORT: ${DB_SERVER_PORT:-8001}
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - db_network
      - host_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8001/health')"]
      interval: 30s
      timeout: 30s
      retries: 3

  proxy-server:
    build:
      context: ./proxy-server
      dockerfile: Dockerfile
    container_name: proxy_server
    environment:
      PROXY_API_KEY: ${PROXY_API_KEY:-your_proxy_api_key_here}
      PROXY_SERVER_PORT: ${PROXY_SERVER_PORT:-8002}
    ports:
      - "8002:8002"
    networks:
      - external
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8002/health')"]
      interval: 30s
      timeout: 30s
      retries: 3

networks:
  db_network:
    driver: bridge
    internal: true  # Keep internal for security
  external:
    driver: bridge
  host_network:
    driver: bridge  # For localhost access to db-server

volumes:
  postgres_data:
    driver: local